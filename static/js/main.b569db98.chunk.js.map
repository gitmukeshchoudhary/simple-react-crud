{"version":3,"sources":["views/AddUserForm.js","views/EditUserForm.js","views/ViewUsers.js","App.js","serviceWorker.js","index.js"],"names":["AddUserForm","props","initialFormState","id","profile","email","userName","useState","user","setUser","handleInputChange","event","target","name","value","onSubmit","preventDefault","addUser","className","htmlFor","type","placeholder","onChange","EditUserForm","useEffect","currentUser","updateUser","ViewUsers","users","length","map","key","src","alt","onClick","editRow","deleteUser","App","setUsers","setCurrentUser","editing","setEditing","updatedUser","newUsersData","filter","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.b569db98.chunk.js","sourcesContent":["import React, { useState } from \"react\";\r\n\r\nconst AddUserForm = props => {\r\n  // Initial form state\r\n  const initialFormState = { id: null, profile: \"\", email: \"\", userName: \"\" };\r\n\r\n  const [user, setUser] = useState(initialFormState);\r\n\r\n  const handleInputChange = event => {\r\n    const { name, value } = event.target;\r\n    setUser({ ...user, [name]: value });\r\n  };\r\n\r\n  // Add user form\r\n  return (\r\n    <form\r\n      onSubmit={event => {\r\n        event.preventDefault();\r\n        if (!user.profile || !user.email || !user.userName) return;\r\n        props.addUser(user);\r\n        setUser(initialFormState);\r\n      }}\r\n    >\r\n      <div className=\"my-4\">\r\n        <div className=\"form-group\">\r\n          <label htmlFor=\"profile\">Profile:</label>\r\n          <input\r\n            id=\"profile\"\r\n            type=\"text\"\r\n            name=\"profile\"\r\n            className=\"form-control\"\r\n            placeholder=\"Enter your profile url\"\r\n            value={user.profile}\r\n            onChange={handleInputChange}\r\n          />\r\n        </div>\r\n        <div className=\"form-group\">\r\n          <label htmlFor=\"email\">Email:</label>\r\n          <input\r\n            id=\"email\"\r\n            type=\"email\"\r\n            name=\"email\"\r\n            className=\"form-control\"\r\n            placeholder=\"Enter your email\"\r\n            value={user.email}\r\n            onChange={handleInputChange}\r\n          />\r\n        </div>\r\n        <div className=\"form-group\">\r\n          <label htmlFor=\"userName\">User name:</label>\r\n          <input\r\n            id=\"userName\"\r\n            type=\"text\"\r\n            name=\"userName\"\r\n            className=\"form-control\"\r\n            placeholder=\"Enter your user name\"\r\n            value={user.userName}\r\n            onChange={handleInputChange}\r\n          />\r\n        </div>\r\n        <button type=\"submit\" className=\"btn btn-primary my-3\">\r\n          Add user\r\n        </button>\r\n      </div>\r\n    </form>\r\n  );\r\n};\r\n\r\nexport default AddUserForm;\r\n","import React, { useState,useEffect } from 'react';\r\n\r\nconst EditUserForm = props => {\r\n    // Initial form state\r\n    const initialFormState = { id: null, profile: \"\", email: \"\", userName: \"\" };\r\n  \r\n    const [user, setUser] = useState(initialFormState);\r\n  \r\n    const handleInputChange = event => {\r\n      const { name, value } = event.target;\r\n      setUser({ ...user, [name]: value });\r\n    };\r\n\r\n    useEffect(\r\n        () => {\r\n          setUser(props.currentUser)\r\n        },\r\n        [ props ]\r\n      )\r\n  \r\n // Edit user form\r\n    return (\r\n      <form\r\n        onSubmit={event => {\r\n          event.preventDefault();\r\n          props.updateUser(user.id,user);\r\n          setUser(initialFormState);\r\n        }}\r\n      >\r\n        <div className=\"my-4\">\r\n          <div className=\"form-group\">\r\n            <label htmlFor=\"profile\">Profile:</label>\r\n            <input\r\n              id=\"profile\"\r\n              type=\"text\"\r\n              name=\"profile\"\r\n              className=\"form-control\"\r\n              placeholder=\"Enter your profile url\"\r\n              value={user.profile}\r\n              onChange={handleInputChange}\r\n            />\r\n          </div>\r\n          <div className=\"form-group\">\r\n            <label htmlFor=\"email\">Email:</label>\r\n            <input\r\n              id=\"email\"\r\n              type=\"email\"\r\n              name=\"email\"\r\n              className=\"form-control\"\r\n              placeholder=\"Enter your email\"\r\n              value={user.email}\r\n              onChange={handleInputChange}\r\n            />\r\n          </div>\r\n          <div className=\"form-group\">\r\n            <label htmlFor=\"userName\">User name:</label>\r\n            <input\r\n              id=\"userName\"\r\n              type=\"text\"\r\n              name=\"userName\"\r\n              className=\"form-control\"\r\n              placeholder=\"Enter your user name\"\r\n              value={user.userName}\r\n              onChange={handleInputChange}\r\n            />\r\n          </div>\r\n          <button type=\"submit\" className=\"btn btn-primary my-3\">\r\n            Update user\r\n          </button>\r\n        </div>\r\n      </form>\r\n    );\r\n  };\r\n  \r\n\r\nexport default EditUserForm;\r\n\r\n","import React from \"react\";\r\n\r\n// View users list\r\nconst ViewUsers = (props) => {\r\n  return  <div className=\"row mx-0 px-0 view-users\">\r\n    {props.users.length ? (\r\n      props.users.map(user => (\r\n        <div className=\"col -sm-12 col-dm-6 col-lg-6\" key={user.id}>\r\n          <div className=\"user-profile my-3 p-3 text-center\">\r\n            <img src={user.profile} alt=\"profile\"/>\r\n            <p className=\"my-2\"><b>Email:</b> {user.email}</p>\r\n            <p className=\"my-2\"><b>User name: </b>{user.userName}</p>\r\n            <i\r\n              className=\"fas fa-edit edit-icon px-2\"\r\n              onClick={() => {\r\n                props.editRow(user);\r\n              }}\r\n            ></i>\r\n            <i\r\n              className=\"fas fa-trash delete-icon px-2\"\r\n              onClick={() => {\r\n                props.deleteUser(user.id);\r\n              }}\r\n            ></i>\r\n          </div>\r\n        </div>\r\n      ))\r\n    ) : (\r\n      <h5>No users</h5>\r\n    )}\r\n  </div>;\r\n};\r\n\r\nexport default ViewUsers;\r\n","import React, { useState, Fragment } from \"react\";\nimport AddUserForm from \"./views/AddUserForm\";\nimport EditUserForm from \"./views/EditUserForm\";\nimport ViewUsers from \"./views/ViewUsers\";\nimport \"./App.css\";\n\nconst App = () => {\n  // Initial users data\n  const usersData = [\n    {\n      id: 1,\n      profile:\n        \"https://i0.wp.com/365webresources.com/wp-content/uploads/2016/09/FREE-PROFILE-AVATARS.png\",\n      email: \"johnwick1@gmail.com\",\n      userName: \"johnwick1\"\n    },\n    {\n      id: 2,\n      profile:\n        \"https://i0.wp.com/365webresources.com/wp-content/uploads/2016/09/FREE-PROFILE-AVATARS.png\",\n      email: \"johnwick2@gmail.com\",\n      userName: \"johnwick2\"\n    },\n    {\n      id: 3,\n      profile:\n        \"https://i0.wp.com/365webresources.com/wp-content/uploads/2016/09/FREE-PROFILE-AVATARS.png\",\n      email: \"johnwick3@gmail.com\",\n      userName: \"johnwick3\"\n    }\n  ];\n\n  // Initial form state\n  const initialFormState = { id: null, profile: \"\", email: \"\", userName: \"\" };\n\n  // Setting state\n  const [users, setUsers] = useState(usersData);\n  const [currentUser, setCurrentUser] = useState(initialFormState);\n  const [editing, setEditing] = useState(false);\n\n  // CRUD operations\n  // Add new user\n  const addUser = user => {\n    user.id = users.length + 1;\n    const newUsersData = [...users, user];\n    setUsers(newUsersData);\n  };\n\n  // Delete the existing user by id\n  const deleteUser = id => {\n    setEditing(false);\n    setUsers(users.filter(user => user.id !== id));\n  };\n\n  // Update the current user\n  const updateUser = (id, updatedUser) => {\n  \tsetEditing(false);\n  \tsetUsers(users.map(user => (user.id === id ? updatedUser : user)));\n  }\n\n  const editRow = user => {\n    setEditing(true);\n    setCurrentUser({ id: user.id, profile: user.profile, email: user.email, userName: user.userName });\n  };\n \n \n\n  return (\n    <div className=\"col-md-10 mx-auto my-5\">\n      <h1 className=\"text-center\">React CRUD App</h1>\n      <hr />\n      <div className=\"row my-5\">\n        <div className=\"col-sm-12 col-md-5 col-lg-5 my-3\">\n          <div className=\"box p-4\">\n            {editing ? (\n              <Fragment>\n                <h2>Edit user</h2>\n                <EditUserForm\n                  editing={editing}\n                  setEditing={setEditing}\n                  currentUser={currentUser}\n                  updateUser={updateUser}\n                />\n              </Fragment>\n            ) : (\n              <Fragment>\n                <h2>Add user</h2>\n                <AddUserForm addUser={addUser} />\n              </Fragment>\n            )}\n          </div>\n        </div>\n        <div className=\"col-sm-12 col-md-7 col-lg-7 my-3\">\n          <div className=\"box p-4\">\n            <h2>View users</h2>\n              <ViewUsers\n                users={users}\n                editRow={editRow}\n                deleteUser={deleteUser}\n              />\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}